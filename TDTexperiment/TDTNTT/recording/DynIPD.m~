function [Signal,Atten,TotalDurMs]=DynIPD(varargin)
%function [Signal,Atten,TotalDurMs]=DynIPD(FreqStr,SPLStr,CenterIPDStr,IPDRangeStr,PeriodStr,DurationStr,Fs)

%Tone -- Generate single tone bursts for 2 channels for the use in RunSeries
%Frequency, SPL, ITD, ILD, and Duration can be specified. The envelope is 
%either fixed between channels or set equal to the ITD for fine structure
%
%<<Input>> 
% !!!! Note !!!! Freq - Duration are all STRINGs.
%Freq :  Frequency (Hz) common for the 1st and 2nd channels.
%SPL : Mean SPL of the 2 channels (dB)
%ITD : Interaural time difference (us). Positive number indicates that the channel 1 is delayed.
%FixEnv : 1 for synchronized envelope, 0 for equal to ITD
%ILD : Interaural level difference (dB). Positive number indicates that the channel 1 is lower.
%Duration: Durations (ms) of Silence1, Tone, Silence2, and Ramp
%Fs: Sampling frequency (Hz)
%
%<<Output>>
%Signal: (2-by-NPts matrix) Row vectors of signal; 1st and 2nd row for channels 1 and 2.
%Atten : (1-by-2 matrix) Attenuations by PA5 for channel1 and 2
%TotalDur: Scalar duration of signal (ms)
%
%By SF, 10/10/01
%

%Get input variables
if length(varargin)<7
    error('Insufficient number of input arguments');
end
[FreqStr,SPLStr,CenterIPDStr,IPDRangeStr,PeriodStr,DurationStr,Fs]=deal(varargin{[1:6 end]});
%keyboard

%Convert the string format of the stimulus paramters to numeric
[Freq,SPL,CenterIPD,IPDRange,Period,Duration]=deal(str2num(FreqStr),str2num(SPLStr),str2num(CenterIPDStr),str2num(IPDRangeStr),...
    str2num(PeriodStr),str2num(DurationStr));

%Duration
myDuration=Duration*1e-3;
[Silence1 ToneDur Silence2 Ramp]=deal(myDuration(1),myDuration(2),myDuration(3),myDuration(4));
NPtsTone=ceil(ToneDur*Fs);
NPtsSilence1=ceil(Silence1*Fs);
NPtsSilence2=ceil(Silence2*Fs);
NPts=NPtsSilece1+NPtsTone+NPtsSilence2;
tTone=(1:NPtsTone)/Fs;

%Phase function
NPtsHalfPeriod=ceil(Period/1000/2*Fs);
Phase1=linspace(IPDRange(1),IPDRange(2),NPtsHalfPeriod);
Phase2=linspace(IPDRange(2),IPDRange(1),NPtsHalfPeriod);
Phase=[Phase1(1:(end-1)) Phase2(1:(end-1))];
NRep=ceil(NPtsTone/length(Phase));
Phase=repmat(Phase,[1 NRep]);
Phase=Phase(1:NPtsTone);

% TotalDur=Silence1+ToneDur+Silence2;
% TotalDurMs=TotalDur*1000;
% NPts=TotalDur*Fs; %Number of points
% t=(1:NPts)/Fs; %time

%Generate waveforms
Signal=zeros(2,NPts);
for iChan=1:2
    
    %Generate sine wave
    if iChan==1
        mySignal=sin(2*pi*Freq*t+Phase+CenterIPD);
    else
        mySignal=sin(2*pi*Freq*t);        
    end
    
    %Apply ramps
    mySignal=Cos2RampMs(mySignal,Ramp,Fs);

    %store in the mat
    Signal(iChan,NPtsSilence1+())=;
   
    %Make sure that zero-signal portions have really zeros
    %This action is necessary because the DECIMATE function often adds small non-zero noise to the signal
    %(probably in the course of lowpass filtering)
    I=find(tDecimate<Silence1+myDTEnv | tDecimate>Silence1+myDTEnv+ToneDur);
    Signal(iChan,I)=0;
end

%Determine the attenuater gains
OrigSPL=20*log10(1/sqrt(2)); %SPL of original signal
Atten=zeros(1,2);
Atten(1)=OrigSPL-(SPL+ILD/2);
Atten(2)=OrigSPL-(SPL-ILD/2);
