function varargout = SetCombNoise(varargin)
% SETCOMBNOISE Application M-file for SetCombNoise.fig
%    FIG = SETCOMBNOISE launch SetCombNoise GUI.
%    SETCOMBNOISE('callback_name', ...) invoke the named callback.

% Last Modified by GUIDE v2.5 16-Dec-2002 17:18:01

if nargin == 0  % LAUNCH GUI

	fig = openfig(mfilename,'reuse');

	% Use system color scheme for figure:
	set(fig,'Color',get(0,'defaultUicontrolBackgroundColor'));

	% Generate a structure of handles to pass to callbacks, and store it. 
	handles = guihandles(fig);
	guidata(fig, handles);

    %----------------------------------
    %Initialization Code
    
    %Use the settings used previously
    if exist('SetCombNoise.mat','file')==2
        load('SetCombNoise') %Load the settings

        if exist('Setting','var')==1
            SetCombNoise('SetSetting',Setting);
        end
        
        %Position in the screen
        if exist('Position','var')==1 
            mypos=get(fig,'Position');
            mypos(1:2)=Position(1:2);
            set(fig,'Position',mypos);
        end
    end   
    %Make sure that the figure is visible on the screen
    movegui(fig,'onscreen');
   
    %----------------------------------


	if nargout > 0
		varargout{1} = fig;
	end

elseif ischar(varargin{1}) % INVOKE NAMED SUBFUNCTION OR CALLBACK

	try
		if (nargout)
			[varargout{1:nargout}] = feval(varargin{:}); % FEVAL switchyard
		else
			feval(varargin{:}); % FEVAL switchyard
		end
	catch
		disp(lasterr);
	end

end



%%%%%%%%%%%%%%% functions created by user %%%%%%%%%%%%%%%%%%%%%%%%%%%%

% --------------------------------------------------------------------
function Setting = GetSetting
%Read the current settings
%

myh=findobj('Tag','fig_setcombnoise');
Setting=[];
%
if ~isempty(myh)
    myhandles=guihandles(myh);
    
    %Passband
    Setting.Passband=get(myhandles.edit_passband,'String');
    Setting.FiltOrder=get(myhandles.edit_filtorder,'String');
    
    %SPL
    Setting.SPL=get(myhandles.edit_spl,'String');
    
    %Delay
    Setting.Delay=get(myhandles.edit_delay,'String');
    
    %ITD
    Setting.ITD=get(myhandles.edit_itd,'String');

    %ILD
    Setting.ILD=get(myhandles.edit_ild,'String');
    
    %Duration
    Setting.Silence1=get(myhandles.edit_silence1,'String');
    Setting.NoiseDur=get(myhandles.edit_noisedur,'String');
    Setting.Silence2=get(myhandles.edit_silence2,'String');
    Setting.Ramp=get(myhandles.edit_ramp,'String');
end

% --------------------------------------------------------------------
function varargout = SetSetting(Setting)
%Set the current settings
%

myh=findobj('Tag','fig_setcombnoise');
if ~isempty(myh) & ~isempty(Setting)
    myhandles=guihandles(myh);
    
    %Passband
    set(myhandles.edit_passband,'String',Setting.Passband);
    set(myhandles.edit_filtorder,'String',Setting.FiltOrder);
    
    %SPL
    set(myhandles.edit_spl,'String',Setting.SPL);
    
    %Delay
    set(myhandles.edit_delay,'String',Setting.Delay);
    
    %ITD
    set(myhandles.edit_itd,'String',Setting.ITD);

    %ILD
    set(myhandles.edit_ild,'String',Setting.ILD);
    
    %Duration
    set(myhandles.edit_silence1,'String',Setting.Silence1);
    set(myhandles.edit_noisedur,'String',Setting.NoiseDur);
    set(myhandles.edit_silence2,'String',Setting.Silence2);
    set(myhandles.edit_ramp,'String',Setting.Ramp);
end

% --------------------------------------------------------------------
function varargout = MakeStimList(Setting)
%Parse the current settings and make the stim list
%
global STIM


%%%%%%%%%%%%% Parse the current settings %%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%Passband
Passband=str2num(Setting.Passband);
if size(Passband,2)~=2
    error('Invalid passband setting.');
elseif any(Passband(:,1)==Passband(:,2))
    error('Identical Lo and Hi cut are not allowed.');
else    
    Passband=sort(Passband,2);
end
NBand=size(Passband,1);

FiltOrder=str2num(Setting.FiltOrder); %filter order
if length(FiltOrder(:))~=1
    error('Invalid filter order setting.');
elseif FiltOrder<=0 | floor(FiltOrder)~=FiltOrder
    error('Filter order must be a positive integer');
end

%SPL
SPL=str2num(Setting.SPL);
if isempty(SPL)
    error('Invalid SPL setting.');
end
NSPL=length(SPL);
    
%Delay
Delay=str2num(Setting.Delay);
if isempty(Delay)
    error('Invalid Delay setting.');
end        
NDelay=length(Delay);
    
%ITD
ITD=str2num(Setting.ITD);
if isempty(ITD)
    error('Invalid ITD setting.');
end        
NITD=length(ITD);

%ILD
ILD=str2num(Setting.ILD);
if isempty(ILD)
    error('Invalid ILD setting.');
end        
NILD=length(ILD);

%Duration
Silence1=str2num(Setting.Silence1);
if length(Silence1)~=1
    error('Invalid Silence1 setting.');
end  
NoiseDur=str2num(Setting.NoiseDur);
if length(NoiseDur)~=1
    error('Invalid Tone Dur. setting.');
end        
Silence2=str2num(Setting.Silence2);
if length(Silence2)~=1
    error('Invalid Silence2 setting.');
end        
Ramp=str2num(Setting.Ramp);
if length(Ramp)~=1
    error('Invalid Ramp setting.');
end        

%%%%%%%%%%%% Make a cell array for a stim list %%%%%%%%%%%%%%%%%%%%%%%%
NCond=NBand*NSPL*NDleay*NITD*NILD;
mySTIM=cell(NCond,8);
cnt=0;
for iBand=1:NBand %%%%%%%%
    myBand=Passband(iBand,:);
    for iSPL=1:NSPL %%%%%%%%
        mySPL=SPL(iSPL);
        for i
        for iITD=1:NITD %%%%%%
            myITD=ITD(iITD);
            for iILD=1:NILD %%%%%
                myILD=ILD(iILD);
                
                cnt=cnt+1;
                mySTIM(cnt,:)={'Noise',num2str(myBand),num2str(FiltOrder), num2str(mySPL),num2str(myITD),num2str(UncorrelatedFlag),...
                        num2str(myILD),num2str([Silence1 NoiseDur Silence2 Ramp])};
                
            end %for iILD=1:NILD
        end %for iITD=1:NITD
    end %for iSPL=1:NSPL
end %for iBand=1:NBand

%Append to STIM
[nrow,ncol]=size(STIM);
d=ncol-8;
if d>0
    STIM=[STIM; [mySTIM cell(NCond,d)]];
elseif d<0
    STIM=[[STIM cell(nrow,-d)]; mySTIM];
else
    STIM=[STIM; mySTIM];
end

%Update the number of conditions in the ExptMan
ExptMan('UpdateNCond'); 



%| ABOUT CALLBACKS:
%| GUIDE automatically appends subfunction prototypes to this file, and 
%| sets objects' callback properties to call them through the FEVAL 
%| switchyard above. This comment describes that mechanism.
%|
%| Each callback subfunction declaration has the following form:
%| <SUBFUNCTION_NAME>(H, EVENTDATA, HANDLES, VARARGIN)
%|
%| The subfunction name is composed using the object's Tag and the 
%| callback type separated by '_', e.g. 'slider2_Callback',
%| 'figure1_CloseRequestFcn', 'axis1_ButtondownFcn'.
%|
%| H is the callback object's handle (obtained using GCBO).
%|
%| EVENTDATA is empty, but reserved for future use.
%|
%| HANDLES is a structure containing handles of components in GUI using
%| tags as fieldnames, e.g. handles.figure1, handles.slider2. This
%| structure is created at GUI startup using GUIHANDLES and stored in
%| the figure's application data using GUIDATA. A copy of the structure
%| is passed to each callback.  You can store additional information in
%| this structure at GUI startup, and you can change the structure
%| during callbacks.  Call guidata(h, handles) after changing your
%| copy to replace the stored original so that subsequent callbacks see
%| the updates. Type "help guihandles" and "help guidata" for more
%| information.
%|
%| VARARGIN contains any extra arguments you have passed to the
%| callback. Specify the extra arguments by editing the callback
%| property in the inspector. By default, GUIDE sets the property to:
%| <MFILENAME>('<SUBFUNCTION_NAME>', gcbo, [], guidata(gcbo))
%| Add any extra arguments after the last argument, before the final
%| closing parenthesis.



% --------------------------------------------------------------------
function varargout = push_append_Callback(h, eventdata, handles, varargin)
%Append the current settings to the STIM cell

%Get the current setting
Setting=SetCombNoise('GetSetting');
MakeStimList(Setting);


% --------------------------------------------------------------------
function varargout = push_finish_Callback(h, eventdata, handles, varargin)
%Append the current settings to the STIM cell and close the window

%Get the current setting
Setting=SetCombNoise('GetSetting');
MakeStimList(Setting);

%Save the current setting
save SetCombNoise Setting

closereq %Close the window


% --------------------------------------------------------------------
function varargout = push_cancel_Callback(h, eventdata, handles, varargin)
%Close the window without appending the current settings

global STIM

ExptMan('UpdateNCond'); %Update the number of conditions in the ExptMan

closereq %Close the window



% --------------------------------------------------------------------
function varargout = edit_passband_Callback(h, eventdata, handles, varargin)




% --------------------------------------------------------------------
function varargout = edit_filtorder_Callback(h, eventdata, handles, varargin)




% --------------------------------------------------------------------
function varargout = edit_spl_Callback(h, eventdata, handles, varargin)




% --------------------------------------------------------------------
function varargout = edit_itd_Callback(h, eventdata, handles, varargin)




% --------------------------------------------------------------------
function varargout = radiobutton2_Callback(h, eventdata, handles, varargin)




% --------------------------------------------------------------------
function varargout = check_uncorrelated_Callback(h, eventdata, handles, varargin)




% --------------------------------------------------------------------
function varargout = edit_ild_Callback(h, eventdata, handles, varargin)




% --------------------------------------------------------------------
function varargout = edit_silence1_Callback(h, eventdata, handles, varargin)




% --------------------------------------------------------------------
function varargout = edit_noisedur_Callback(h, eventdata, handles, varargin)




% --------------------------------------------------------------------
function varargout = edit_silence2_Callback(h, eventdata, handles, varargin)




% --------------------------------------------------------------------
function varargout = edit_ramp_Callback(h, eventdata, handles, varargin)


% --- Executes during object creation, after setting all properties.
function edit_delay_CreateFcn(hObject, eventdata, handles)
% hObject    handle to edit_delay (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc
    set(hObject,'BackgroundColor','white');
else
    set(hObject,'BackgroundColor',get(0,'defaultUicontrolBackgroundColor'));
end



function edit_delay_Callback(hObject, eventdata, handles)
% hObject    handle to edit_delay (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of edit_delay as text
%        str2double(get(hObject,'String')) returns contents of edit_delay as a double


