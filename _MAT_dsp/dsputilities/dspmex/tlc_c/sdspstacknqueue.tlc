%% 
%% 
%% 
%%
%% Copyright 1995-2012 The MathWorks, Inc.
%%
%% Abstract: Target file for the S-Function sdspbuffers.cpp
%%           Used for the Stack and Queue blocks

%implements "sdspstacknqueue" "C"
%include "event_port_handler.tlc"

%% Function: BlockInstanceSetup ===============================================
%%
%% Abstract:
%%      Get all fixed settings into block
%%
%function BlockInstanceSetup(block, system) void
  %%whether dynamic allocation or not - boolean
  %assign dynamic = (SFcnParamSettings.PushFull == 1)
  %assign FCNID   = SFcnParamSettings.FcnId
  %assign STACK   = 0
  %assign QUEUE   = 1
  %assign isRAccelMode = (CompiledModel.ConfigSet.SystemTargetFile == "raccel.tlc")
  %if UsingMalloc != 1 && dynamic && !isRAccelMode
    %%Not possible to do dynamic allocation without malloc
    %if FCNID == STACK
      %<LibBlockReportError(block,"The stack block's action for a push on a " \
      "full stack has been specified to be 'Dynamic reallocation'. When this " \
      "action is specified, the 'Target selection' on the 'Code Generation' pane of " \
      "the 'Configuration Parameters' dialog must be set to the 'Generic " \ 
      "Real-Time Target with dynamic memory allocation' (grt_malloc) target " \
      "file. Please choose a different action for a push " \
      "full stack event, or change the target selection.")>
    %else
      %<LibBlockReportError(block, "The queue block's action for a push onto " \
      "full register has been specified to be 'Dynamic reallocation'. When this " \
      "action is specified, the 'Target selection' on the 'Code Generation' pane of " \
      "the 'Configuration Parameters' dialog must be set to the 'Generic " \ 
      "Real-Time Target with dynamic memory allocation' (grt_malloc) target " \
      "file. Please choose a different action for a push onto full register " \
      "event, or change the target selection.")>
    %endif
  %endif

  %assign NoDirectFeedthrough = SFcnParamSettings.AllowDirectFeedthrough == 0
  %assign block = block + dynamic + NoDirectFeedthrough

  %%
  %% Mandatory I/O port indices
  %%
  %assign DATAIN_PORT = 0
  %assign PUSH_PORT   = 1
  %assign POP_PORT    = 2
  %assign CLR_PORT    = 3
  %assign OUTPORTDATA = 0

  %assign block = block + DATAIN_PORT  + PUSH_PORT    + POP_PORT     +\
                          CLR_PORT     + OUTPORTDATA  + FCNID        +\
                          STACK        + QUEUE

  %assign width = LibBlockInputSignalWidth(0)     %%width of input
  %assign starwidth = (width > 1) ? "*%<width>" : ""    %%avoid mult by 1
  %assign cplx  = LibBlockInputSignalIsComplex(0) %%input data complexity

  %%sizeof(inputdata)
  %assign sig_datatype    = LibBlockInputSignalDataTypeName(DATAIN_PORT,"")
  %assign bytesPerElemStr = "sizeof(%<sig_datatype>)"

  %assign ClrPort = SFcnParamSettings.ClearInport           %%clear port exist?

  %assign block = block + width + starwidth + cplx + sig_datatype +\
                  bytesPerElemStr + ClrPort

  %%find and fill optional outport numbers and their existence
  %assign emptyport = SFcnParamSettings.EmptyOutport        %%empty port exist?
  %assign fullport  = SFcnParamSettings.FullOutport         %%full port exist?
  %assign numport   = SFcnParamSettings.NumEntriesOutport   %%num elems port?
  %assign block     = block + emptyport + fullport + numport

  %assign outportnum = 1
  %if (emptyport)
    %assign emptyportnum = outportnum
    %assign block        = block + emptyportnum
    %assign outportnum   = outportnum+1
  %endif
  %if (fullport)
    %assign fullportnum = outportnum
    %assign block       = block + fullportnum
    %assign outportnum  = outportnum+1
  %endif
  %if (numport)
    %assign numportnum = outportnum
    %assign block      = block + numportnum
  %endif

  %<EventPortHandlerInstanceSetup(block)>
  %%find dwork index for eph states
  %if EventPortRequiresState(block)
      %assign pushephstate = EPH0PrevState
      %assign popephstate  = EPH1PrevState
      %if (ClrPort)
        %assign clrephstate = EPH2PrevState
      %else
        %assign clrephstate = 0
      %endif
  %else
      %assign pushephstate = 0
      %assign popephstate  = 0
      %assign clrephstate  = 0
  %endif
  %assign block = block + pushephstate + popephstate + clrephstate
%endfunction %% BlockInstanceSetup

%% Function: InitializeConditions =============================================
%% Abstract:
%%      Initialize event port handlers
%%      Allocate memory in case dynamic memory allocation is selected
%%      Clear the buffer and output if needed
%%
%function InitializeConditions(block, system) Output
  /* DSP System Toolbox %<BlockName(FCNID)> (%<ParamSettings.FunctionName>) - '%<Name>' */
  %if LibBlockInputSignalConnected(PUSH_PORT)
    %<InitializeEventPortPrevStateCache(block, pushephstate)>  \
  %endif
  %if LibBlockInputSignalConnected(POP_PORT)
    %<InitializeEventPortPrevStateCache(block, popephstate)>   \
  %endif
  %if ClrPort && LibBlockInputSignalConnected(CLR_PORT)
    %<InitializeEventPortPrevStateCache(block, clrephstate)> \
  %endif
  %%Initialize Buffer indices
    %assign newTid = LibGetSFcnTIDType("InputPortIdx0")
    %if (!ISEQUAL(newTid, "constant"))
      {
        %%Initialize memory if dynamically allocated
        %if %<dynamic>
          const size_t numbytes = %<bytesPerElemStr>%<starwidth>;
          %<LibBlockDWork(Depth, "", "", 0)> = %<SFcnParamSettings.Depth>;
          %<LibBlockDWork(BufferPtr, "", "", 0)> =\
          malloc(%<LibBlockDWork(Depth, "", "", 0)>*numbytes);
        %endif
        %<Buffers(block, "CLEAR")> \
      }
    %endif
%endfunction

%%%%%%%%%%%%%%%%%%%%%
%% Function: Outputs ==========================================================
%%
%function Outputs(block, system) Output
/* DSP System Toolbox %<BlockName(FCNID)> (%<ParamSettings.FunctionName>) - '%<Name>' */
{
   %%all the following assign statements cant be in blockinstancesetup because
   %%it wont work if dwork is referred only there
   %%Get dwork variables into block structure
   %if (dynamic)
     %assign depth = LibBlockDWork(Depth, "", "", 0) %%current capacity changes in case of dynamic
     %assign bufferptr = LibBlockDWork(BufferPtr, "", "", 0)  %%ptr to buffer
     %%In the case of dynamic this dwork is already a pointer
     %assign bufferptrcast = "((%<sig_datatype>*)%<bufferptr>)"
     %%bufferptrcast needed when we do pointer arithmetic
     %%because in dynamic allocation bufferptr will be void *
   %else
     %assign depth = SFcnParamSettings.Depth         %%current capacity of buffer
     %assign bufferptr = LibBlockDWorkAddr(BufferPtr, "", "", 0)  %%ptr to buffer
     %assign bufferptrcast = bufferptr   %%no type casting needed
   %endif
  %assign block = block + bufferptr + bufferptrcast + depth
  %%dwork to store top of stack or queue indices
  %if (FCNID == STACK)
    %assign StackTop = LibBlockDWork(StackTopIdx, "", "", 0)
    %assign block    = block + StackTop
  %else
    %assign QueueFront = LibBlockDWork(QueueFrontIdx, "", "", 0)
    %assign QueueBack  = LibBlockDWork(QueueBackIdx, "", "", 0)
    %assign NumElems   = LibBlockDWork(NumElements, "", "", 0) %%num elems in Q
    %assign block      = block + QueueFront + QueueBack + NumElems
  %endif
  %%
  %%
  const size_t numbytes = %<bytesPerElemStr>%<starwidth>;
  %if ClrPort && LibBlockInputSignalConnected(CLR_PORT)
    if (%<CheckEventPort(block, CLR_PORT, clrephstate)>) /* CLEAR */
    {
      %<Buffers(block, "CLEAR")>
    }
  %endif
  %if (SFcnParamSettings.AllowDirectFeedthrough) %%Allow Direct Feedthrough
    %if LibBlockInputSignalConnected(PUSH_PORT)
      if (%<CheckEventPort(block, PUSH_PORT, pushephstate)>)  /* PUSH */
      {
        %<Buffers(block, "PUSH")>   \
      }
    %endif
    %if LibBlockInputSignalConnected(POP_PORT)
      if (%<CheckEventPort(block, POP_PORT, popephstate)>)   /* POP */
      {
        %<Buffers(block, "POP")>   \
      }
    %endif
  %else
    %% No Direct Feedthrough
    %if LibBlockInputSignalConnected(POP_PORT)
      if (%<CheckEventPort(block, POP_PORT, popephstate)>)   /* POP */
      {
        %<Buffers(block, "POP")>   \
      }
    %endif
    %if LibBlockInputSignalConnected(PUSH_PORT)
      if (%<CheckEventPort(block, PUSH_PORT, pushephstate)>) 
      {
        %<LibBlockDWork(PushEvent, "", "", 0)> = 1;
      } else {
        %<LibBlockDWork(PushEvent, "", "", 0)> = 0;
      }
    %endif
  %endif
  %<EmptyBuf(block)> \
  %<FullBuf(block)>  \
  %<NumBuf(block)>   \
}
%endfunction %% Outputs

%% Function: Update ===========================================================
%% Abstract:
%%   Update state for Queue when direct feedthrough is turned off
%%
%function Update(block, system) Output
  %if NoDirectFeedthrough
  {
    %if LibBlockInputSignalConnected(PUSH_PORT)
      %if (dynamic)
        %assign depthLocal = LibBlockDWork(Depth, "", "", 0)
        %assign bufferptrLocal = LibBlockDWork(BufferPtr, "", "", 0)  
        %assign bufferptrcastLocal = "((%<sig_datatype>*)%<bufferptrLocal>)"
      %else
        %assign depthLocal = SFcnParamSettings.Depth        
        %assign bufferptrcastLocal = LibBlockDWorkAddr(BufferPtr, "", "", 0)   
      %endif
      const size_t numbytes = %<bytesPerElemStr>%<starwidth>;
      if ((%<LibBlockDWork(PushEvent, "", "", 0)> == 1) && (%<LibBlockDWork(NumElements, "", "", 0)> < %<SFcnParamSettings.Depth>))
      {
       memcpy(%<bufferptrcastLocal>+(%<LibBlockDWork(QueueBackIdx, "", "", 0)> % %<depthLocal>)%<starwidth>,\
                %<LibBlockInputSignalAddr(0, "", "", 0)>, numbytes);
       %<LibBlockDWork(QueueBackIdx, "", "", 0)>++;
       %<LibBlockDWork(NumElements, "", "", 0)>++;
      }
    %endif
  }
  %endif
  
%endfunction %% Update

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Function: BlockName   ======================================================
%%
%function BlockName(fcnid)
  %switch (fcnid)
    %case STACK
      %assign blocknamestr = "Stack"
      %break
    %case QUEUE
      %assign blocknamestr = "Queue"
      %break
  %endswitch
  %return blocknamestr
%endfunction  %% BlockName

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Function: Buffers   ========================================================
%%
%% Generate code according to the event passed
%function Buffers(block, message) Output
  %switch (message)
    %case "CLEAR"
      %<Clear(block)>
      %break
    %case "PUSH"
      %if dynamic   %%either do dynamic memory allocation
          if (%<NumBufEntries(block)> == %<depth>)  /* if %<BlockName(FCNID)> is full */
          {
              %<MemAlloc(block)>
          }
          %<Push(block)>
      %else
          if (%<NumBufEntries(block)> != %<depth>)
          {
              %<Push(block)>
          }
      %endif
      %break
    %case "POP"
      %<Pop(block)>
      %break
  %endswitch
%endfunction  %% Buffers

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Function: Clear   ==========================================================
%%
%% Create code for clear event
%% Set indices to zero. Set output to zero if clear on reset is selected
%function Clear(block) Output
    %if (FCNID == STACK)
      %<LibBlockDWork(StackTopIdx, "", "", 0)> = 0;
    %else
      %<LibBlockDWork(QueueFrontIdx, "", "", 0)> =\
      %<LibBlockDWork(QueueBackIdx, "", "", 0)>  =\
      %<LibBlockDWork(NumElements, "", "", 0)> = 0;
    %endif
    %%if clear on reset is selected we need to set output to zero when
    %%clear is set
    %if (SFcnParamSettings.ClearOutOnReset) %%Clear on reset
        memset(%<LibBlockOutputSignalAddr(0, "", "", 0)>, 0, %<bytesPerElemStr>%<starwidth>); \
            /* Set output values to zero */
    %endif
%endfunction  %% Clear

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Function: MemAlloc   =======================================================
%%
%% Create code for dynamic memory allocation
%function MemAlloc(block) Output
    /*Allocate more memory since %<BlockName(FCNID)> has become full */
    %if (FCNID == STACK)
      %<bufferptr> = realloc(%<bufferptr>, 2*numbytes*%<depth>);
      %<depth> *= 2;       /* Capacity has doubled */
    %else
      void *newbuffer = malloc(2*numbytes*%<depth>);
      memcpy(newbuffer, %<bufferptrcast>+%<QueueFront>%<starwidth>, \
                  (%<depth>-%<QueueFront>)*numbytes);
      memcpy(((%<sig_datatype>*)newbuffer)+(%<depth>-%<QueueFront>), %<bufferptr>, \
                  %<QueueFront>*numbytes);
      free(%<bufferptr>);
      %<bufferptr>  = newbuffer;
      %<QueueBack>  = %<depth>;
      %<QueueFront> = 0;
      %<depth> *= 2;      /* Capacity has doubled */
    %endif
%endfunction  %% MemAlloc

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Function: Push   ===========================================================
%%
%% Create code for Push event
%function Push(block) Output
   %%copy input elements into the buffer
   %if (FCNID == STACK)
     memcpy(%<bufferptrcast>+%<StackTop>%<starwidth>,\
                %<LibBlockInputSignalAddr(0, "", "", 0)>, numbytes);
     %<StackTop> ++;
   %else
     memcpy(%<bufferptrcast>+(%<QueueBack> % %<depth>)%<starwidth>,\
                %<LibBlockInputSignalAddr(0, "", "", 0)>, numbytes);
     %<QueueBack>++;
     %<NumElems>++;
   %endif
%endfunction  %% Push

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Function: Pop   ============================================================
%%
%% Create code for pop event
%function Pop(block) Output
  %if (FCNID == STACK)
    if (%<StackTop>)
    {
      %<StackTop> --;
      memcpy(%<LibBlockOutputSignalAddr(0, "", "", 0)>, \
                %<bufferptrcast>+%<StackTop>%<starwidth>, numbytes);
    }
  %else
    if (%<NumElems>)
    {
      memcpy(%<LibBlockOutputSignalAddr(0, "", "", 0)>,\
                %<bufferptrcast>+%<QueueFront>%<starwidth>, numbytes);
      %<NumElems> --;
      if ((%<QueueFront> + 1) == %<depth>)
      {
        %<QueueFront> = 0;
        %<QueueBack> %= %<depth>;
      }
      else %<QueueFront> ++;
    }
  %endif
%endfunction  %% Pop

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Function: EmptyBuf   =======================================================
%%
%% Create code for setting output of isempty port
%function EmptyBuf(block) Output
    %if (emptyport)  %%if port exists
      %if NoDirectFeedthrough
        if (%<LibBlockDWork(PushEvent, "", "", 0)> == 1)
        {
          %<LibBlockOutputSignal(emptyportnum, "", "", 0)> = 0;
        } else {
      %endif
      %<LibBlockOutputSignal(emptyportnum, "", "", 0)> = \
          (%<LibBlockOutputSignalDataTypeName(emptyportnum,"")>)\
                                  (%<NumBufEntries(block)> == 0);
      %if NoDirectFeedthrough
      }
      %endif
    %endif
%endfunction  %% EmptyBuf

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Function: FullBuf   ========================================================
%%
%% Create code for setting output of isfull port
%function FullBuf(block) Output
    %if (fullport)
        %if (!dynamic)   %%if port exists and not dynamic allocation
            %if NoDirectFeedthrough
              %<LibBlockOutputSignal(fullportnum, "", "", 0)> =    \
                (%<LibBlockOutputSignalDataTypeName(fullportnum,"")>)\
                    (%<NumBufEntries(block)> >= (uint32_T)((%<depth>-%<LibBlockDWork(PushEvent, "", "", 0)>)));
            %else
              %<LibBlockOutputSignal(fullportnum, "", "", 0)> =    \
                (%<LibBlockOutputSignalDataTypeName(fullportnum,"")>)\
                    (%<NumBufEntries(block)> == %<depth>);
            %endif
        %else
            %<LibBlockOutputSignal(fullportnum, "", "", 0)> = 0;
        %endif
    %endif
%endfunction  %% FullBuf

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Function: NumBuf   =========================================================
%%
%% Create code for setting output of number of elements port
%function NumBuf(block) Output
    %if (numport)   %%if port exists
      %<LibBlockOutputSignal(numportnum, "", "", 0)> = \
            (%<LibBlockOutputSignalDataTypeName(numportnum,"")>)\
                                       %<NumBufEntries(block)>;
      %if NoDirectFeedthrough
        if (%<LibBlockOutputSignal(numportnum, "", "", 0)>  < %<depth>)
        {
          %<LibBlockOutputSignal(numportnum, "", "", 0)> += \
            (%<LibBlockOutputSignalDataTypeName(numportnum,"")>)\
            %<LibBlockDWork(PushEvent, "", "", 0)>;
        }
      %endif
    %endif
%endfunction  %% NumBuf

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Function: NumBufEntries  ====================================================
%%
%% Create code for number of elements in the buffer currently
%function NumBufEntries(block)
  %if (FCNID == STACK)
    %return StackTop
  %else
    %return NumElems
  %endif
%endfunction  %% NumBufEntries

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Function: Terminate  ====================================================
%%
%% Clean up allocated memory
%function Terminate(block, system) Output
  %%free memory if dynamically allocated
  %if %<dynamic>
    free(%<LibBlockDWork(BufferPtr, "", "", 0)>); %%<bufferptr> wont work here
  %endif
%endfunction    %%Terminate

%% [EOF] sdspstacknqueue.tlc

