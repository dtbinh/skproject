%% 
%% Abstract: Matrix 1-Norm
%%
%% Copyright 1995-2008 The MathWorks, Inc.
%%  

%implements sdspm1norm2 "C"

%% Function: Outputs ==========================================================
%%
%function Outputs(block, system) Output
%%
%% All fixed-point blocks call the fixed-point setup function
%%
%<FixPt_Setup(block, system)>
%%
%%
%% Common setup code
%%
%assign INPORT  = 0
%assign OUTPORT = 0
%assign isScaledDouble = SFcnParamSettings.isScaledDouble
%assign numDims = LibBlockInputSignalNumDimensions(INPORT)
%assign dims    = LibBlockInputSignalDimensions(INPORT)
%assign N       = (numDims == 2) ? dims[1] : 1
%assign M       = dims[0]
%assign cplx    = LibBlockInputSignalIsComplex(INPORT) != 0
%assign inDT    = FixPt_GetInputDataType(INPORT)
%assign outDT   = FixPt_GetOutputDataType(OUTPORT)
%%
/* DSP System Toolbox Matrix 1-Norm (%<ParamSettings.FunctionName>) - '%<Name>' */
{
  %if (!%<isScaledDouble> && FixPt_DataTypeIsFloat(inDT))
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %% FLOATING POINT CODE GENERATION             %%
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %%
    %% Floating-point-only setup code
    %%
    %assign dtype   = LibBlockInputSignalDataTypeName(INPORT,"")
    %assign dtype_c = LibBlockInputSignalDataTypeName(INPORT,"%<tRealPart>")
    %%
    const %<dtype> *u = %<LibBlockInputSignalAddr(INPORT, "", "", 0)>;
    %if N > 1
      %<dtype_c>  m1norm = 0.0;
      int_T   j;
      for(j=%<N>; j-- > 0; ) {
    %endif
    %<dtype_c> sumabsAj = 0.0;
    %if M > 1
      int_T  i;
      for(i=%<M>; i-- > 0; ) {
    %endif
    %%
    %if !cplx
      %% REAL
        %if dtype == "real32_T"
          real32_T temp = *u++;
          sumabsAj += fabsf(temp);
        %else
          sumabsAj += fabs(*u++);
        %endif
    %else
      %% COMPLEX
      %<dtype_c> cabsAij;
      const %<dtype> uval = *u++;
      %if dtype == "creal32_T"
        CABS32(uval, cabsAij);
      %else
        CABS(uval, cabsAij);
      %endif
      sumabsAj += cabsAij;
    %endif
    %%
    %if M > 1
    }
    %endif
    %%
    %if N > 1
      m1norm = MAX(m1norm, sumabsAj);
    }
    %<LibBlockOutputSignal(OUTPORT, "", "", 0)> = m1norm;
    %else
      %<LibBlockOutputSignal(OUTPORT, "", "", 0)> = sumabsAj;
    %endif
  %else
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %% FIXED-POINT CODE GENERATION                %%
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %%
    %% Fixed-point-only setup code
    %%
    %assign boolDT = DataTypes.DataType[tSS_BOOLEAN]
    %%
    %createrecord RndSatRec { roundingMode FixPtRoundingMode; ...
                              overflowMode FixPtSaturationMode}
    %%
    %assign       acc1Label = "acc1"
    %assign       accDT     = FixPt_GetParameterDataType(ACC_DATA_TYPE, 0, 0)
    %createrecord Acc1Rec    { label     acc1Label; ...
                              dTypeRec  accDT; ...
                              isComplex 0 }
    %if N > 1
      %assign       acc2Label = "acc2"
      %createrecord Acc2Rec   { label     acc2Label; ...
                                dTypeRec  accDT; ...
                                isComplex 0 }
    %endif
    %%
    %if (M == 1) && (N == 1)
      %% SCALAR input
      %assign inLabel = LibBlockInputSignal(INPORT, "", "", "0")
    %elseif (M == 1) && (N > 1)
      %% ROW vector input
      %assign inLabel = LibBlockInputSignal(INPORT, "j", "", "0")
    %elseif (M > 1) && (N == 1)
      %% COLUMN vector input
      %assign inLabel = LibBlockInputSignal(INPORT, "i", "", "0")
    %else
      %% FULL MATRIX input
      %% (M > 1) && (N > 1)
      %assign inLabel = LibBlockInputSignal(INPORT, "i+chanOffset", "", "0")
    %endif
    %%
    %createrecord InpRec  { label     inLabel; ...
                            dTypeRec  inDT; ...
                            isComplex cplx }
    %%
    %assign       outLabel = LibBlockOutputSignal(OUTPORT, "", "", "0")
    %createrecord OutRec   { label     outLabel; ...
                             dTypeRec  outDT; ...
                             isComplex 0 }
    %if N > 1
      /* Initialize value for first accumulated sum comparison */
      %<accDT.Name> %<acc2Label> = %<FixPt_GetGroundValueOrNameFromDataTypeRec(accDT, TLC_FALSE)>;

      /* Loop over input columns */
      int j;
      for (j=0; j<%<N>; j++) {
      %if (M > 1)
        const int chanOffset = %<M> * j;

      %endif
    %endif
    %%
    %if (M > 1) && (N > 1)
      /* Compute accumulated sum of abs vals for this column */
    %endif
    %%
    %<accDT.Name> %<acc1Label> = %<FixPt_GetGroundValueOrNameFromDataTypeRec(accDT, TLC_FALSE)>;
    %%
    %if M > 1
      int i;
      for (i=0; i<%<M>; i++) {
    %endif
    %%
    %if %<inDT.IsSigned> || %<isScaledDouble>
      %% Signed data types
      %if FixPt_DataTypeIsMultiWord(inDT)
        %% Multi-word less-than-zero comparison
        %assign grndValueOrName = FixPt_GetGroundValueOrNameFromDataTypeRec(inDT, TLC_FALSE)
        %<boolDT.NativeType> isNegative;
      
        %<FixPt_MultiWordCompLT("isNegative", boolDT, inLabel, inDT, grndValueOrName, inDT, "Simplest", "Saturate")>
        if (isNegative) {
      %else
        %% Single-word
        if (%<inLabel> < 0) {
      %endif
          %<DSPFixptLibMinusEquals(Acc1Rec, InpRec, RndSatRec)>
        } else {
          %<DSPFixptLibPlusEquals(Acc1Rec, InpRec, RndSatRec)>
        }
    %else
      %% Unsigned data types
      %<DSPFixptLibPlusEquals(Acc1Rec, InpRec, RndSatRec)>
    %endif
    %%
    %if M > 1
      }
    %endif
    %%
    %if N > 1

      /* --------------------------- */
      /* Update matrix 1-norm output */
      /* i.e., Out = MAX(Acc2, Acc1) */
      /* --------------------------- */
      %if FixPt_DataTypeIsMultiWord(accDT)
        {
          %<boolDT.NativeType> isAcc2GTAcc1;
          
          %<FixPt_MultiWordCompGT("isAcc2GTAcc1", boolDT, acc2Label, accDT, acc1Label, accDT, "Simplest", "Saturate")>
          if (isAcc2GTAcc1) {
            /* Acc2 > Acc1 */
            %<DSPFixptLibEquals(OutRec, Acc2Rec, RndSatRec)>
          } else {
            /* Acc1 >= Acc2 */
            %<DSPFixptLibEquals(OutRec, Acc1Rec, RndSatRec)>
          }
        }
      %else
        %% Single-word
        %<acc2Label> = MAX(%<acc2Label>, %<acc1Label>);
        %<DSPFixptLibEquals(OutRec, Acc2Rec, RndSatRec)>
      %endif
    }
    %else
      %% (N == 1)
      %<DSPFixptLibEquals(OutRec, Acc1Rec, RndSatRec)>
    %endif
  %endif  %% Floating-point vs fixed-point code
}
%%  %endif
  
%endfunction

%% [EOF] sdspm1norm2.tlc
