function spblksUpdateModel(h)
% Function spblksUpdateModel is a helper function to be called as part of
% slupdate. It is not intended to be called directly from the command line. This
% function specifies the functions that need to be called by the core slupdate
% mechanism for individual SPB blocks.
 
%   Copyright 2007-2013 The MathWorks, Inc.


if h.CheckFlags.BlockReplace
    ReplaceInfoNoCompile = { ...
        { 'ReferenceBlock', sprintf('dspobslib/DSP\nConstant')}, ...
        'ReplaceDSPConstant';
        { 'ReferenceBlock', sprintf('dspxfrm3/FFT'),'TableOpt','HYBRID'}, ...
        'RemoveFFTWarnForNormalizeCB';
        { 'ReferenceBlock', sprintf('dspxfrm3/FFT'),'TableOpt','Speed'}, ...
        'RemoveFFTWarnForNormalizeCB';
        { 'ReferenceBlock', sprintf('dspxfrm3/FFT'),'TableOpt','Memory'}, ...
        'RemoveFFTWarnForNormalizeCB';
        { 'ReferenceBlock', sprintf('dspmlti4/CIC\nDecimation'), ...
        'ftype', 'Zero-latency decimator'}, ...
        'UpdateZeroLatencyCICFilter';
        { 'ReferenceBlock', sprintf('dspmlti4/CIC\nInterpolation'), ...
        'ftype','Zero-latency interpolator'}, ...
        'UpdateZeroLatencyCICFilter';
        };
    
    ReplaceInfoNoCompile = ...
        cell2struct(ReplaceInfoNoCompile, { 'BlockDesc', 'ReplaceFcn'}, 2);
    replaceBlocks(h, ReplaceInfoNoCompile);
end

% Slupdate blocks that require model compilation.  This includes all blocks
% involved in the frame upgrade.
if h.CheckFlags.Compiled
    
    % --- Frame upgrade list:  begin --- %         
    
    [inProcOnlyList, rateOptionsOnlyList, rateOptionsAndInProcList, ...
     inProcDependentList, rowConvList, FDesignList]   = dspGetFrameUpgradeList;
    numBlksInProcOnly               = size(inProcOnlyList,1);
    ReplaceInfoInProcOnly           = cell(numBlksInProcOnly, 2);
    numBlksRateOptionsOnly          = size(rateOptionsOnlyList,1);
    ReplaceInfoRateOptionsOnly      = cell(numBlksRateOptionsOnly, 2);
    numBlksRateOptionsAndInProc     = size(rateOptionsAndInProcList,1);
    ReplaceInfoRateOptionsAndInProc = cell(numBlksRateOptionsAndInProc, 2);
    numBlksInProcDep                = size(inProcDependentList,1);
    ReplaceInfoInProcDep            = cell(numBlksInProcDep, 2);
    numBlksRowConv                  = size(rowConvList,1);
    ReplaceInfoRowConv              = cell(numBlksRowConv, 2);

    ReplaceTreatMby1List = {{'BlockType', 'Buffer'}, ...
        {'ReferenceBlock', 'dspbuff3/Delay Line'}, ...
        {'ReferenceBlock', sprintf('dspobslib/Triggered\nDelay Line')} ...
        {'ReferenceBlock', sprintf('dsparch4/Overlap-Save\nFFT Filter')}, ...
        {'ReferenceBlock', sprintf('dsparch4/Overlap-Add\nFFT Filter')}, ...
        {'ReferenceBlock', sprintf('dspxfrm3/Short-Time FFT')}};
    numBlksReplaceTreatMby1         = length(ReplaceTreatMby1List);
    ReplaceTreatMby1                = cell(numBlksReplaceTreatMby1, 2);
    
    ReplaceSLInputProcList = { ...
        {'ReferenceBlock', sprintf('simulink/Discrete/Difference')} ...
        {'ReferenceBlock', sprintf('simulink/Discrete/Discrete Derivative')}, ...
        {'ReferenceBlock', sprintf('simulink/Discrete/Transfer Fcn\nReal Zero')}, ...
        {'ReferenceBlock', sprintf('simulink/Logic and Bit\nOperations/Detect\nIncrease')} ...
        {'ReferenceBlock', sprintf('simulink/Logic and Bit\nOperations/Detect\nDecrease')} ...
        {'ReferenceBlock', sprintf('simulink/Logic and Bit\nOperations/Detect\nChange')} ...
        {'ReferenceBlock', sprintf('simulink/Logic and Bit\nOperations/Detect Rise\nPositive')} ...
        {'ReferenceBlock', sprintf('simulink/Logic and Bit\nOperations/Detect Rise\nNonnegative')} ...
        {'ReferenceBlock', sprintf('simulink/Logic and Bit\nOperations/Detect Fall\nNegative')} ...
        {'ReferenceBlock', sprintf('simulink/Logic and Bit\nOperations/Detect Fall\nNonpositive')} ...
        };
    numBlksSLInputProcList = length(ReplaceSLInputProcList);
    ReplaceSLInputProc     = cell(numBlksSLInputProcList, 2);
    
    numBlksReplaceSBProc       = 1;
    ReplaceSBProc              = cell(numBlksReplaceSBProc,2);
    ReplaceSBProcList = {{'BlockType', 'Unbuffer'}};
    ReplaceUnwrapInProc     = cell(1,2);

    % Define the inherited option of the 'Input processing' parameter
    inpProcInhStr = ...
        'Inherited (this choice will be removed - see release notes)';    
    
    % Build the ReplaceInfo array for blocks that have only the 'Input
    % processing' parameter
    for idx = 1:numBlksInProcOnly
        ReplaceInfoInProcOnly(idx,:) = { ...
            {'ReferenceBlock', sprintf('%s', inProcOnlyList{idx,2}), ...
            'InputProcessing', inpProcInhStr}, ...            
            'InProcRegisterCompileCheck'};
    end

    % Define the inherited option of the 'Rate option' parameter
    rateOptInhStr = ....
        'Inherit from input (this choice will be removed - see release notes)';    
    % Build the ReplaceInfo array for blocks that have only the 'Rate option'
    % parameter
    for idx = 1:numBlksRateOptionsOnly
        ReplaceInfoRateOptionsOnly(idx,:) = { ...
            {'ReferenceBlock', sprintf('%s',rateOptionsOnlyList{idx,2}), ...
            'RateOptions', rateOptInhStr}, ...            
            'RateOptionsRegisterCompileCheck' };
    end
    
    % Build the ReplaceInfo array for blocks that have both the 'Rate option'
    % and the 'Input processing' parameters
    for idx = 1:numBlksRateOptionsAndInProc
        ReplaceInfoRateOptionsAndInProc(idx,:) = { ...
                {'ReferenceBlock', sprintf('%s',rateOptionsAndInProcList{idx,2}), ...
                'InputProcessing', inpProcInhStr}, ...
                'InProcRegisterCompileCheck' };
    end
        
    % Build the ReplaceInfo array for blocks that have only the 'Input
    % processing' parameter which is dependent on a specific value of a
    % controlling parameter
    for idx = 1:numBlksInProcDep
        ReplaceInfoInProcDep(idx,:) = { ...
            {'ReferenceBlock', sprintf('%s',inProcDependentList{idx,2}), ...
            inProcDependentList{idx,3}, inProcDependentList{idx,4}, ...
            'InputProcessing', inpProcInhStr}, ...        
            'InProcRegisterCompileCheck' };
    end
    
    % Build the ReplaceInfo array for blocks that support row convenience
    for idx = 1:numBlksRowConv
        ReplaceInfoRowConv(idx,:) = {...
            {'ReferenceBlock', sprintf('%s',rowConvList{idx, 2})}, ...
            'RowConvRegisterCompileCheck' };
    end

    % Build the ReplaceInfo array for blocks having the 'TreatMby1Signals'
    % parameter.
    for idx = 1:numBlksReplaceTreatMby1
        ReplaceTreatMby1(idx,:) = {{...
            sprintf('%s', ReplaceTreatMby1List{idx}{1}), ...
            sprintf('%s', ReplaceTreatMby1List{idx}{2})}, ...
            'TreatMby1RegisterCompileCheck'};
    end
    
    % Build the ReplaceInfo array for SL blocks having the 'InputProcessing'
    % parameter.
    for idx = 1:numBlksSLInputProcList
        ReplaceSLInputProc(idx,:) = {{...
            sprintf('%s', ReplaceSLInputProcList{idx}{1}), ...
            sprintf('%s', ReplaceSLInputProcList{idx}{2}), ...
            'InputProcessing', 'Inherited'}, ...
            'InProcRegisterCompileCheck'};
    end
    
    % Build the ReplaceInfo array for blocks having the 'SampleBasedProcessing'
    % parameter.
    for idx = 1:numBlksReplaceSBProc
        ReplaceSBProc(idx,:) = {{...
            sprintf('%s', ReplaceSBProcList{idx}{1}), ...
            sprintf('%s', ReplaceSBProcList{idx}{2})}, ...
            'SampleBasedProcessingRegisterCompileCheck'};
    end
    
    % Build the ReplaceInfo array for Unwrap block
    ReplaceUnwrapInProc(idx,:) = { ...
            {'ReferenceBlock', sprintf('dspsigops/Unwrap'), ...
            'InputProcessing', inpProcInhStr}, ...            
            'UnwrapRegisterCompileCheck'};
    
    % Build the ReplaceInfo array for the Interpolation block
    ReplaceInterpProc = { ...
        {'ReferenceBlock', sprintf('dspsigops/Interpolation')}, ...
        'InterpRegisterCompileCheck'};
    
    % Build the ReplaceInfo array for the Signal To Workspace block
    ReplaceStwsProc = { ...
        {'BlockType', 'SignalToWorkspace', ...
        'Save2DSignal', rateOptInhStr}, ...
        'StwsCompileCheck'};
    
    % Build the ReplaceInfo array for the Triggered To Workspace block
    ReplaceTrigtwsProc = { ...
        {'ReferenceBlock', sprintf('dspsnks4/Triggered\nTo Workspace'), ...
        'Save2DMode', rateOptInhStr}, 'TrigTowkCompileCheck'};
    
    % Build the ReplaceInfo array for blocks that do not belong to any list
    % generated by dspGetFrameUpgradeList, but still need to perform some slupdate task
    % as related to frame upgrade.
    ReplaceInfoFrameUpgradeMisc = { ...
        {'ReferenceBlock', sprintf('dsparch4/Digital Filter'), ...
        'InputProcessing', inpProcInhStr}, ...            
        'InProcRegisterCompileCheck'; ...
        {'ReferenceBlock', sprintf('dspmlti4/FIR\nDecimation'), ...
        'InputProcessing', inpProcInhStr}, ...            
        'InProcRegisterCompileCheck'; ...
        {'ReferenceBlock', sprintf('dspmlti4/FIR\nInterpolation'), ...
        'InputProcessing', inpProcInhStr}, ...            
        'InProcRegisterCompileCheck'; ...
        {'ReferenceBlock', 'dspstat3/Histogram', 'operateOver', inpProcInhStr}, ...
        'HistogramRegisterCompileCheck'; ...
        {'ReferenceBlock', sprintf('dspsigops/Downsample'), ...
        'InputProcessing', inpProcInhStr}, ...
        'DownSampleRegisterCompileCheck'; ...
        {'ReferenceBlock', sprintf('dspmathops/Difference'), ...
        'Run', rateOptInhStr}, ...
 	    'DifferenceRegisterCompileCheck'};
    
    % Build the ReplaceInfo array for the Simulink Bias block.  This is also for
    % the frame upgrade.
    ReplaceInfoBias = { {'BlockType', 'Bias'}, 'BiasRegisterCompileCheck' };
    
    % Build the ReplaceInfo array for Simulink delay blocks
    ReplaceInfoUnitDelay = { {'BlockType', 'UnitDelay', ...
                            'InputProcessing', 'Inherited'}, ...
                                'SLDelayRegisterCompileCheck' };
    ReplaceInfoDelay = { {'BlockType', 'Delay', ...
                            'InputProcessing', 'Inherited'}, ...
                        'SLDelayRegisterCompileCheck' };
    ReplaceInfoTappedDelay = { {'ReferenceBlock', sprintf('simulink/Discrete/Tapped Delay')}, ...
                                'TappedDelayRegisterCompileCheck' };
                            
    % ReplaceInfo array for Simulink Backlash and Relay blocks
    ReplaceInfoBacklash = { {'BlockType', 'Backlash', ...
                                'InputProcessing', 'Inherited'}, ...
                                'SLBacklashRegisterCompileCheck'};
    ReplaceInfoRelay = { {'BlockType', 'Relay', ...
                          'InputProcessing', 'Inherited'}, ... 
                        'SLBacklashRegisterCompileCheck'};                        
                    
    % ReplaceInfo array for Simulink Transfer Fcn Lead or Lag block and
    % Simulink Transfer Fcn First Order block
    ReplaceInfoTFLeadLag = { {'ReferenceBlock', sprintf('simulink/Discrete/Transfer Fcn\nLead or Lag')}, ...
                              'TransferFcnLeadLagRegisterCompileCheck' };
    ReplaceInfoTFFirstOrder = { {'ReferenceBlock', sprintf('simulink/Discrete/Transfer Fcn\nFirst Order')}, ...
                                'TransferFcnFirstOrderRegisterCompileCheck' };
                    
    % Build the ReplaceInfo array for Simulink checker blocks
    if slfeature('FrameSignalUpgradeCheck')
        ReplaceInfoInport = { {'BlockType', 'Inport'}, ...
            'SLCheckerBlocksRegisterCompileCheck' };
    end;
    ReplaceInfoOutport = { {'BlockType', 'Outport'}, ...
                                'SLCheckerBlocksRegisterCompileCheck' };
    ReplaceInfoSigSpec = { {'BlockType', 'SignalSpecification'}, ...
                                'SLCheckerBlocksRegisterCompileCheck' };
    ReplaceInfoSPCDelay = { {'ReferenceBlock', sprintf('dspsigops/Delay'), ...
                            'InputProcessing', inpProcInhStr}, ...
                                'DelayRegisterCompileCheck' };
                                             
    % --- Frame Upgrade list: end ---%
    
    % Build the ReplaceInfo array for the DSP Matrix Sum block.
    ReplaceInfoDSPMatrixSum = { ...
        {'ReferenceBlock', sprintf('dspobslib/Matrix\nSum')}, ...
        'DSPMatrixSumRegisterCompileCheck'};
    
    % Build the ReplaceInfo array for the Spectrum Scope block
    ReplaceInfoSpectrumScope = { ...
        {'ReferenceBlock', sprintf('dspsnks4/Spectrum\nScope')}, ...
        'SpectrumScopeRegisterCompileCheck'};
    
    % Build the ReplaceInfo array for the Vector Scope block
    ReplaceInfoVectorScope = { ...
        {'ReferenceBlock', sprintf('dspsnks4/Vector\nScope')}, ...
        'VectorScopeRegisterCompileCheck'};    
    
    % Build the ReplaceInfoFDesign array for the Filter Design Library blocks    
    numBlksInProcAndRateOption  = size(FDesignList,1);
    ReplaceInfoFDesign          = cell(numBlksInProcAndRateOption,2);
    for idx = 1:numBlksInProcAndRateOption
        ReplaceInfoFDesign(idx,:) = { ...
            {'MaskType', sprintf('%s', FDesignList{idx,1})},...
            'FDesignRegisterCompileCheck'};
    end   
   
    % Build the ReplaceInfoFDesign array for the Digital Filter Design block
    ReplaceInfoDFD      = { ...
        {'MaskType', 'Digital Filter Design'},...
        'DFDRegisterCompileCheck'};
   
       % Build Dyadic Analysis Filter Bank block in dspobslib
    ReplaceDyadicAnalysis = { ...
        {'ReferenceBlock', sprintf('dspobslib/Dyadic Analysis\nFilter Bank')}, ...
        'DSPOBSLIBRegisterCompileCheck'};

    % Build Dyadic Synthesis Filter Bank block in dspobslib
    ReplaceDyadicSynthesis = { ...
        {'ReferenceBlock', sprintf('dspobslib/Dyadic Synthesis\nFilter Bank')}, ...
        'DSPOBSLIBRegisterCompileCheck'};

    % Build Wavelet Analysis block in dspobslib
    ReplaceWaveletAnalysis = { ...
        {'ReferenceBlock', sprintf('dspobslib/Wavelet\nAnalysis')}, ...
        'DSPOBSLIBRegisterCompileCheck'};

    % Build Wavelet Synthesis block in dspobslib
    ReplaceWaveletSynthesis = { ...
        {'ReferenceBlock', sprintf('dspobslib/Wavelet\nSynthesis')}, ...
        'DSPOBSLIBRegisterCompileCheck'};

    % Build Integer Delay block in dspobslib
    ReplaceIntegerDelay = { ...
        {'ReferenceBlock', sprintf('dspobslib/Integer Delay')}, ...
        'DSPOBSLIBRegisterCompileCheck'};
    
    % Build the ReplaceInfoDSPOBSLIB array for blocks in dspobslib
    ReplaceInfoDSPOBSLIB = { ...
                           {'ReferenceBlock', sprintf('dspobslib/Dyadic Analysis\nFilter Bank')}, ...
                           'DSPOBSLIBRegisterCompileCheck';
                           {'ReferenceBlock', sprintf('dspobslib/Dyadic Synthesis\nFilter Bank')}, ...
                           'DSPOBSLIBRegisterCompileCheck'; 
                           {'ReferenceBlock', sprintf('dspobslib/Wavelet\nAnalysis')}, ...
                           'DSPOBSLIBRegisterCompileCheck'; 
                           {'ReferenceBlock', sprintf('dspobslib/Wavelet\nSynthesis')}, ...
                           'DSPOBSLIBRegisterCompileCheck';
                           {'ReferenceBlock', sprintf('dspobslib/Integer Delay')}, ...
                           'DSPOBSLIBRegisterCompileCheck'}; 
    
    ReplaceInfo = [ReplaceInfoInProcOnly; ReplaceInfoRateOptionsOnly; ...
        ReplaceInfoBacklash; ReplaceInfoRelay; ...
        ReplaceInfoTFLeadLag; ReplaceInfoTFFirstOrder; ...
        ReplaceInfoRateOptionsAndInProc; ReplaceInfoInProcDep; ...
        ReplaceInfoRowConv; ReplaceInfoFrameUpgradeMisc; ReplaceInfoBias; ...
        ReplaceInfoDSPMatrixSum; ReplaceInfoSpectrumScope; ...
        ReplaceInfoVectorScope; ReplaceTreatMby1; ReplaceSBProc; ...
        ReplaceUnwrapInProc; ReplaceInterpProc; ReplaceStwsProc; ...
        ReplaceInfoFDesign; ReplaceInfoUnitDelay; ReplaceInfoSPCDelay; ...
        ReplaceInfoDelay; ReplaceInfoTappedDelay;  ReplaceInfoDFD; ...
        ReplaceInfoOutport; ReplaceInfoSigSpec; ...
        ReplaceSLInputProc; ...
        ReplaceInfoDSPOBSLIB; ...
        ReplaceTrigtwsProc;];
    
    if slfeature('FrameSignalUpgradeCheck')
       ReplaceInfo = [ReplaceInfo; ReplaceInfoInport]; 
    end
    
    ReplaceInfo = cell2struct(ReplaceInfo, { 'BlockDesc', 'ReplaceFcn'}, 2);
    replaceBlocks(h, ReplaceInfo);
    
end

% [EOF]

% LocalWords:  SPB dspobslib dspxfrm dspsnks dspmlti ftype Proc dsp dsparch
% LocalWords:  dspstat dspbuff Mby Unbuffer dspsigops Stws Tws dspmathops Towk
% LocalWords:  FDesign DFD DMode Trigtws
