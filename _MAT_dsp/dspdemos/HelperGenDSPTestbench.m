function HelperGenDSPTestbench(sources,sinks,alg,param)
% Generate DSP Test Bench
% 
% Inputs:
%   sources - A cell array of one or more of the following strings: 
%             'dsp.AudioFileReader', 'dsp.AudioRecorder', 'dsp.SineWave',
%             'dsp.ColoredNoise', 'dsp.MatFileReader', and 'randn'.
%   sinks   - A cell array of one or more of the following strings:
%             'dsp.AudioFileWriter', 'dsp.AudioPlayer', 'dsp.TimeScope',
%             'dsp.SpectrumAnalyzer', dsp.TransferFunctionEstimator', and
%             'dsp.MatFileWriter'.
%   alg     - Name of the function defined by user that need to be tested.
%   param   - A structure of parameters relevant to the algorithm that need
%             to be tuned during execution. Tuning is enabled by the 
%             Parameter Tuning UI. For more help, see 
%             HelperCreateParamTuningUI.
%
% Examples:
%   1. Sine wave plus white noise -> spectrum analyzer
%      HelperGenDSPTestbench({'dsp.SineWave','randn'},{'dsp.SpectrumAnalyzer','dsp.AudioPlayer'});
%
%   2. Audio recorder -> time scope plus audio file writer
%      HelperGenDSPTestbench({'dsp.AudioRecorder'},{'dsp.TimeScope','dsp.AudioFileWriter'});
%
%   3. Audio file reader -> transfer function estimator with custom algorithm
%      HelperGenDSPTestbench({'dsp.AudioFileReader'},{'dsp.TransferFunctionEstimator'},...
%           'custom_alg');
%
%   4. Audio file reader -> transfer function estimator with custom
%      algorithm and tunable parameters
%       param(1).Name = 'CenterFrequency';
%       param(1).InitialValue = 10000;
%       param(1).Limits = [0,22050];
%       param(2).Name = 'Bandwidth';
%       param(2).InitialValue = 2000;
%       param(2).Limits = [0,22050];
%       param(3).Name = 'Gain';
%       param(3).InitialValue = 6.020000e+00;
%       param(3).Limits = [-20,20];
%      HelperGenDSPTestbench({'dsp.AudioFileReader'},{'dsp.TransferFunctionEstimator'},...
%           'custom_alg',param);

% Copyright 2013 The MathWorks, Inc.

%#ok<*AGROW>

%% Process input arguments
if nargin < 1
    sources = {'dsp.AudioFileReader'};
end

if nargin < 2
    sinks = {'dsp.AudioPlayer','dsp.AudioFileWriter'};
end

if nargin < 3
    alg = '';
end

if nargin > 3
    addParamTuningUI = true;
else
    addParamTuningUI = false;
end


%% Create initialization part of the testbench
str = sprintf('function s = dsp_testbench\n');
str = [str,sprintf('%% Rename this function and save it as a *.m file\n')];
str = [str,sprintf('%% Generated by HelperGenDSPTestbench on: '),datestr(clock)];
str = [str,sprintf('\n\n')];

str = [str,sprintf('%%%% Initialization\n')];
str = [str,sprintf('SamplesPerFrame = 1024;\n')];
str = [str,sprintf('loopTimeInSecs = 120;\n')];
str = [str,sprintf('\n')];

% Initialization of sources and sinks
str = addsources(str,sources);
str = addsinks(str,sinks);

% Initialization of the Parameter Tuning UI
if addParamTuningUI
    str = [str,sprintf('%% Create a structure of parameters to be used by the Parameter Tuning UI.\n')];
    str = [str,sprintf('%% See HelperCreateParamTuningUI for more details.\n')];
    for k = 1:length(param)
        str = [str,sprintf('param(%d).Name = ''%s'';\n',k,param(k).Name)];
        str = [str,sprintf('param(%d).InitialValue = %d;\n',k,param(k).InitialValue)];
        str = [str,sprintf('param(%d).Limits = [%d,%d];\n',k,param(k).Limits(1),param(k).Limits(2))];
    end
    str = [str,sprintf('%% Create Parameter Tuning UI for the list of parameters\n')];
    str = [str,sprintf('GUI = HelperCreateParamTuningUI(param, ''Tuning'');\n')];
    str = [str,sprintf('\n')];
end


%% Create the signal streaming part of the testbench
str = [str,sprintf('%%%% Stream\n')];
str = streamsources(str,sources,alg,addParamTuningUI);

if addParamTuningUI
    % Custom Algorithm with Parameter Tuning enabled
    str = [str,sprintf('\t %% Custom algorithm\n')];
    str = [str,sprintf('\t outData = %s(inData,...\n',alg)];
    str = [str,sprintf('\t \t tunedParams,initialParams,simControlFlags.resetObj);\n')];
elseif ~isempty(alg)
    % Custom Algorithm but no Parameter Tuning
    str = [str,sprintf('\t %% Custom algorithm\n')];
    str = [str,sprintf('\t outData = %s(inData);\n',alg)];
else
    % No Custom Algorithm and no Parameter Tuning
    str = [str,sprintf('\t %% Replace with custom algorithm\n')];
    str = [str,sprintf('\t outData = inData;\n')];
end
str = [str,sprintf('\n')];

str = streamsinks(str,sinks);
str = [str,sprintf('end\n\n')];

str = [str,sprintf('%%%% Terminate\n')];
str = terminatesources(str,sources);
str = terminatesinks(str,sinks,addParamTuningUI);

if addParamTuningUI
    str = [str,sprintf('\n')];
    str = createCallbackFunction(str);
end

% Write file
matlab.desktop.editor.newDocument(str);


function str = addsources(str,sources)
%% --------------------------------
str = [str,sprintf('%% Sources\n')];
for k = 1:length(sources)
    if strcmp(sources{k},'dsp.AudioFileReader')
        str = [str,sprintf('AFR = dsp.AudioFileReader(''guitar10min.ogg'',''SamplesPerFrame'',SamplesPerFrame);\n')];
        str = [str,sprintf('Fs = AFR.SampleRate;\n')];
        str = [str,sprintf('\n')];
    elseif strcmp(sources{k},'dsp.AudioRecorder')
        str = [str,sprintf('AR = dsp.AudioRecorder(''SamplesPerFrame'',SamplesPerFrame,...\n')];
        str = [str,sprintf('\t ''OutputDataType'',''double'');\n')];
        str = [str,sprintf('Fs = AR.SampleRate;\n')];
        str = [str,sprintf('\n')];
    elseif strcmp(sources{k},'dsp.SineWave')
        if k == 1
            str = [str,sprintf('Fs = 44100;\n')];
        end
        str = [str,sprintf('SW = dsp.SineWave(''SamplesPerFrame'',SamplesPerFrame,...\n')];
        str = [str,sprintf('\t ''SampleRate'',Fs,''Frequency'',[800,800]);\n')];
        str = [str,sprintf('\n')];
    elseif strcmp(sources{k},'dsp.ColoredNoise')
        str = [str,sprintf('CN = dsp.ColoredNoise(''SamplesPerFrame'',SamplesPerFrame,...\n')];
        str = [str,sprintf('\t ''NumChannels'',2); %% Pink noise\n')];
        str = [str,sprintf('\n')];
    elseif strcmp(sources{k},'dsp.MatFileReader')
        str = [str,sprintf('inFileName = [tempname,''.mat'']; %% Replace inFileName with your MAT file\n')];
        str = [str,sprintf('originalData = randn(SamplesPerFrame*loopTimeInSecs,2);\n')];
        str = [str,sprintf('save(inFileName,''originalData'',''-v7.3'');\n')];
        str = [str,sprintf('MFR = dsp.MatFileReader(inFileName,''VariableName'',''originalData'',...\n')];
        str = [str,sprintf('\t  ''SamplesPerFrame'',SamplesPerFrame);\n')];
        str = [str,sprintf('\n')];
    elseif strcmp(sources{k},'randn')
        if k == 1
            str = [str,sprintf('Fs = 44100;\n')];
            str = [str,sprintf('\n')];
        end
    end
end


function str = addsinks(str,sinks)
%% -------------------------------
str = [str,sprintf('%% Sinks\n')];
for k = 1:length(sinks)
    if strcmp(sinks{k},'dsp.AudioPlayer')
        str = [str,sprintf('AP = dsp.AudioPlayer(''SampleRate'',Fs);\n')];
        str = [str,sprintf('\n')];
    elseif strcmp(sinks{k},'dsp.SpectrumAnalyzer')
        str = [str,sprintf('SA = dsp.SpectrumAnalyzer(''SampleRate'',Fs,''ShowLegend'',true,...\n')];
        str = [str,sprintf('\t ''PlotAsTwoSidedSpectrum'',false,''SpectralAverages'',20,''FrequencyScale'',''Log'');\n')];
        str = [str,sprintf('\n')];
    elseif strcmp(sinks{k},'dsp.TransferFunctionEstimator')
        str = [str,sprintf('TFE = dsp.TransferFunctionEstimator(''FrequencyRange'',''onesided'',...\n')];
        str = [str,sprintf('\t ''SpectralAverages'',1);\n')];
        str = [str,sprintf('ArrPlt = dsp.ArrayPlot(''PlotType'',''Line'',...\n')];
        str = [str,sprintf('\t ''YLimits'',[-20 20],''SampleIncrement'',Fs/(2*512),...\n')];
        str = [str,sprintf('\t ''YLabel'',''Magnitude (dB)'',''XLabel'',''Frequency (Hz)'',...\n')];
        str = [str,sprintf('\t ''Title'',''Transfer Function Estimate'');\n')];
        str = [str,sprintf('\n')];
    elseif strcmp(sinks{k},'dsp.TimeScope')
        str = [str,sprintf('TS = dsp.TimeScope(''SampleRate'',Fs,''BufferLength'',2*Fs,...\n')];
        str = [str,sprintf('\t ''TimeSpan'',1,''YLimits'',[-0.5 0.5],''ShowLegend'',true,''ShowGrid'',true);\n')];
        str = [str,sprintf('\n')];
    elseif strcmp(sinks{k},'dsp.AudioFileWriter')
        str = [str,sprintf('AFW = dsp.AudioFileWriter(''SampleRate'',Fs,...\n')];
        str = [str,sprintf('\t ''FileFormat'',''FLAC'',''Filename'', ''output.flac'');\n')];
        str = [str,sprintf('\n')];
    elseif strcmp(sinks{k},'dsp.MatFileWriter')
        str = [str,sprintf('outFileName = [tempname,''.mat'']; %% Replace tempname with your MAT file name\n')];
        str = [str,sprintf('MFW = dsp.MatFileWriter(outFileName,''VariableName'',''originalData'');\n')];
        str = [str,sprintf('\n')];
    end
end


function str = streamsources(str,sources,alg,addUI)
%% ---------------------------------
if addUI
    str = [str,sprintf('clear HelperUnpackUDP;\n')];
end

if ~isempty(alg)
    str = [str,sprintf('clear %s;\n',alg)];
end

str = [str,sprintf('tic;\n')];
str = [str,sprintf('while toc < loopTimeInSecs\n')];

if addUI
    str = [str,sprintf('\t %% Process data from Parameter Tuning UI\n')];
    str = [str,sprintf('\t [simControlFlags,tunedParams,initialParams] = processTunedParameters(param);\n')];
    str = [str,sprintf('\n')];
    str = [str,sprintf('\t if simControlFlags.stopSim     %% If "Stop Simulation" button is pressed\n')];
    str = [str,sprintf('\t \t break;\n')];
    str = [str,sprintf('\t end\n')];
    str = [str,sprintf('\n')];
    str = [str,sprintf('\t if simControlFlags.pauseSim    %% If "Pause Simulation" button is pressed\n')];
    str = [str,sprintf('\t \t drawnow;   \n')];
    str = [str,sprintf('\t \t continue;\n')];
    str = [str,sprintf('\t end\n\n')];
end

str = [str,sprintf('\t %% Sources\n')];
for k = 1:length(sources)
    if strcmp(sources{k},'dsp.AudioFileReader')
        if k == 1
            str = [str,sprintf('\t inData = step(AFR);            ')];
            str = [str,sprintf('%% Read frame from audio file\n')];
        else
            str = [str,sprintf('\t inData = inData + step(AFR);   ')];
            str = [str,sprintf('%% Add frame from audio file\n')];
        end
    elseif strcmp(sources{k},'dsp.AudioRecorder')
        if k == 1
            str = [str,sprintf('\t inData = step(AR);             ')];
            str = [str,sprintf('%% Read frame from microphone\n')];
        else
            str = [str,sprintf('\t inData = inData + step(AR);    ')];
            str = [str,sprintf('%% Add frame from microphone\n')];
        end
    elseif strcmp(sources{k},'dsp.SineWave')
        if k == 1
            str = [str,sprintf('\t inData = step(SW);             ')];
            str = [str,sprintf('%% Sine Wave frame \n')];
        else
            str = [str,sprintf('\t inData = inData + step(SW);    ')];
            str = [str,sprintf('%% Add Sine Wave frame \n')];
        end
    elseif strcmp(sources{k},'dsp.ColoredNoise')
        if k == 1
            str = [str,sprintf('\t inData = step(CN);             ')];
            str = [str,sprintf('%% Colored Noise frame\n')];
        else
            str = [str,sprintf('\t inData = inData + step(CN);    ')];
            str = [str,sprintf('%% Add Colored Noise frame\n')];
        end
    elseif strcmp(sources{k},'dsp.MatFileReader')
        if k == 1
            str = [str,sprintf('\t inData = step(MFR);\n          ')];
            str = [str,sprintf('%% Read frame from MAT File\n')];
        else
            str = [str,sprintf('\t inData = inData + step(MFR);   ')];
            str = [str,sprintf('%% Add frame from MAT File\n')];
        end
    elseif strcmp(sources{k},'randn')
        str = [str,sprintf('\t s2 = 1;                        ')];
        str = [str,sprintf('%% Standard deviation for white noise\n')];
        if k == 1
            str = [str,sprintf('\t inData = s2*randn(SamplesPerFrame,2);  ')];
            str = [str,sprintf('%% White noise frame \n')];
        else
            str = [str,sprintf('\t inData = inData + s2*randn(SamplesPerFrame,2);  ')];
            str = [str,sprintf('%% Add white noise frame \n')];
        end
    end
end
str = [str,sprintf('\n')];


function str = streamsinks(str,sinks)
%% ----------------------------------
str = [str,sprintf('\t %% Sinks\n')];

for k = 1:length(sinks)
    if strcmp(sinks{k},'dsp.AudioPlayer')
        str = [str,sprintf('\t step(AP,outData);              ')];
        str = [str,sprintf('%% Play resulting audio\n')];
    elseif strcmp(sinks{k},'dsp.SpectrumAnalyzer')
        str = [str,sprintf('\t step(SA,[inData,outData]);     ')];
        str = [str,sprintf('%% View spectrum\n')];
    elseif strcmp(sinks{k},'dsp.TransferFunctionEstimator')
        str = [str,sprintf('\t H = step(TFE,inData,outData);  ')];
        str = [str,sprintf('%% Estimate transfer function\n')];
        str = [str,sprintf('\t step(ArrPlt,20*log10(abs(H))); ')];
        str = [str,sprintf('%% View estimated transfer function\n')];
    elseif strcmp(sinks{k},'dsp.TimeScope')
        str = [str,sprintf('\t step(TS,[inData,outData]);     ')];
        str = [str,sprintf('%% View waveform\n')];
    elseif strcmp(sinks{k},'dsp.AudioFileWriter')
        str = [str,sprintf('\t step(AFW,outData);             ')];
        str = [str,sprintf('%% Write resulting\n')];
    elseif strcmp(sinks{k},'dsp.MatFileWriter')
        str = [str,sprintf('\t step(MFW,outData);             ')];
        str = [str,sprintf('%% Write resulting data stream to MAT File\n')];
    end
end


function str = terminatesources(str,sources)
%% -------------------------------------
str = [str,sprintf('%% Sources\n')];
for k = 1:length(sources)
    if strcmp(sources{k},'dsp.AudioFileReader')
        str = [str,sprintf('release(AFR);\n')];
    elseif strcmp(sources{k},'dsp.AudioRecorder')
        str = [str,sprintf('release(AR);\n')];
    elseif strcmp(sources{k},'dsp.SineWave')
        str = [str,sprintf('release(SW);\n')];
    elseif strcmp(sources{k},'dsp.ColoredNoise')
        str = [str,sprintf('release(CN);\n')];
    elseif strcmp(sources{k},'dsp.MatFileReader')
        str = [str,sprintf('release(MFR);\n')];
    end
end


function str = terminatesinks(str,sinks,addUI)
%% -------------------------------------
str = [str,sprintf('%% Sinks\n')];
str = [str,sprintf('s = [];\n')];
for k = 1:length(sinks)
    if strcmp(sinks{k},'dsp.AudioPlayer')
        str = [str,sprintf('release(AP);\n')];
    elseif strcmp(sinks{k},'dsp.SpectrumAnalyzer')
        str = [str,sprintf('release(SA);\n')];
        str = [str,sprintf('s.SA = SA;\n')];
    elseif strcmp(sinks{k},'dsp.TransferFunctionEstimator')
        str = [str,sprintf('release(TFE);\n')];
        str = [str,sprintf('release(ArrPlt);\n')];
        str = [str,sprintf('s.ArrPlt = ArrPlt;\n')];
    elseif strcmp(sinks{k},'dsp.TimeScope')
        str = [str,sprintf('release(TS);\n')];
        str = [str,sprintf('s.TS = TS;\n')];
    elseif strcmp(sinks{k},'dsp.AudioFileWriter')
        str = [str,sprintf('release(AFW);\n')];
    elseif strcmp(sinks{k},'dsp.MatFileWriter')
        str = [str,sprintf('release(MFW);\n')];
    end
end
if addUI
    str = [str,sprintf('close(GUI);\n')];
end

function str = createCallbackFunction(str)
%% -------------------------------------
% Callback function for Parameter Tuning
str = [str, sprintf('function [simControlFlags, tunedParams, initialParams] = processTunedParameters(param)\n')];
str = [str,sprintf('%%%% Callback function for parameter tuning\n\n')];

str = [str, sprintf('%% Unpack received UDP packet and obtain new values for parameters\n')];
str = [str, sprintf('[packet,simControlFlags] = HelperUnpackUDP();\n')];
str = [str, sprintf('initialParams = [];\n')];
str = [str, sprintf('tunedParams = [];\n')];

% pauseSim or stopSim
str = [str, sprintf('%% Handle pauseSim and stopSim\n')];
str = [str, sprintf('if simControlFlags.pauseSim || simControlFlags.stopSim\n')];
str = [str, sprintf('\t return;\n')];
str = [str, sprintf('end\n\n')];

% Copy parameter initial values
str = [str, sprintf('%% Initial values for the parameters\n')];
str = [str, sprintf('for c = 1:length(param)\n')];
str = [str, sprintf('\t initialParams.(param(c).Name) = param(c).InitialValue;\n')];
str = [str, sprintf('end\n\n')];

% Code for Tuning
str = [str, sprintf('%% When tuned, return a structure of new parameter values\n')];
str = [str, sprintf('if ~isempty(packet)\n')];
str = [str, sprintf('\t for c = 1:length(param)\n')];
str = [str, sprintf('\t \t tunedParams.(param(c).Name) = packet(c);\n')];
str = [str, sprintf('\t end\n')];
str = [str, sprintf('end\n')];

