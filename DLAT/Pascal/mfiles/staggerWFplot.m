function staggerWFplot(DLATTBCAT, intensity, normto, sf, datafilenames)

% StaggerWFplot(DLAT, intensity, normto, sf, datafilenames)
%
% staggers curves from WFplots from the data in DLAT (generated by pslatgen_all) according to cf.
% 'intensity' specifies which curves are taken, and 'normto' defines to which intensity the curves are normalized.
% 'normto' specifies the spl to which the curves are normalized
% scaling factor sf has to be specified in Hz/normalized nr of correlations
% datafilestring contains all the filenames of the data in a string (e.g. datafilenames = 'A0241,A0242'
%
% TF 12/09/2005

xmin = -0.5;
xmax = 0.5;
ymin = 0;
ymax = 5000;

figure;
axis([xmin xmax ymin ymax]);
hold on;
title(['Crosscorrelograms @ ' num2str(intensity) ' dB normalized with respect to ' num2str(normto) ' dB. Data: ' datafilenames]);
xlabel('Delay (ms)');
ylabel('CF (Hz)');
line([(xmin+xmax)/2 (xmin+xmax)/2],[ymin ymax],'color',[0 0 0],'LineStyle','--');

nd = numel(DLATTBCAT);
D=DLATTBCAT;

for i=1:nd
    
    line(D(i).lag(dx(i),:), D(i).normco(dx(i),:), 'LineStyle', '-', 'Marker', 'none', 'Color', [1 0 0]);
    
    if ~isempty(find(D(i).xval==intensity))&~isempty(find(D(i).xval==normto))

        dx(i) = find(D(i).xval==intensity);
    
        ndx(i) = find(D(i).xval==normto);
        
        nfactor = D(i).ppnormmagn(nidx); % the normalize factor is the height of the central peak
        
        D(i).normco(dx(i),:) = (D(i).normco(dx(i),:))/nfactor; % normalize curves to primary peak of normto-intensity
         
        D(i).normco(dx(i),:) = D(i).normco(dx(i),:)*sf + D(i).cf;
        
        line(D(i).lag(dx(i),:), D(i).normco(dx(i),:), 'LineStyle', '-', 'Marker', 'none', 'Color', [1 0 0]);
        
        %plot curve (difcors are plotted blue, non-difcors red)
        if D(i).difcor == 1, line(D(i).lag(dx(i),:), D(i).normco(dx(i),:), 'LineStyle', '-', 'Marker', 'none', 'Color', [0 0 1]); %plot difcor
            
        elseif D(i).difcor == 0, 
        line(D(i).lag(dx(i),:), D(i).normco(dx(i),:), 'LineStyle', '-', 'Marker', 'none', 'Color', [1 0 0]);% plot nt-difcor
            
        else, disp(['rij ' num2str(i) ' van D heeft een invalid difcor-waarde']);
        end
        
     
        
%         plot dot on primary peak
        line(D(i).yval(dx(i)), D(i).normco(dx(i), find(abs(D(i).lag(dx(i),:)-D(i).yval(dx(i)))<2.680e-014)), 'LineStyle', 'none', 'Marker', 'o', ...
        'Color', 'k','MarkerFace', [1 1 1]);
        
    
        % plot dots on secundary peaks
        try, %try used to handle correlograms without sec-peaks
        line(D(i).spdelay(dx(i),1), D(i).normco(dx(i), find(abs(D(i).lag(dx(i),:)-D(i).spdelay(dx(i),1))<2.680e-014)), 'LineStyle', 'none', 'Marker', 'v', ...
        'Color', 'k','MarkerFace', [1 1 1]);
        line(D(i).spdelay(dx(i),2), D(i).normco(dx(i),  find(abs(D(i).lag(dx(i),:)-D(i).spdelay(dx(i),2))<2.680e-014)), 'LineStyle', 'none', 'Marker', '^', ...
        'Color', 'k','MarkerFace', [1 1 1]);
        end
    end
end

